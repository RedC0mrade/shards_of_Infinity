import asyncio
import sys
from pathlib import Path

project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.backend.core.models.engine import DatabaseHelper
from app.backend.core.models.card import Card, CardEffect
from config import settings
from models_jsons.start_deck import start_data
from models_jsons.wilds import wilds_data
from models_jsons.demirealm import demirealm_cards
from models_jsons.homodeus import homodeus_cards
from models_jsons.order import order_cards


async def seed_all_cards():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏ (—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∏ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã)"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DatabaseHelper —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config
    db_helper = DatabaseHelper(
        url=str(settings.db.url),
        echo=settings.db.echo,
        echo_pool=settings.db.echo_pool,
        pool_size=settings.db.pool_size,
        max_overflow=settings.db.max_overflow,
    )

    try:
        async with db_helper.session_context() as session:
            from sqlalchemy import select

            print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ
            result = await session.execute(select(Card))
            existing_cards = result.scalars().all()

            if existing_cards:
                print(
                    f"‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {len(existing_cards)} –∫–∞—Ä—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ."
                )
                return

            print("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞–º–∏...")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç
            all_cards_data = (
                start_data
                + wilds_data
                + homodeus_cards
                + demirealm_cards
                + order_cards
            )
            total_cards = len(all_cards_data)

            print(f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {total_cards}")
            print(f"  - –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã: {len(start_data)}")
            print(f"  - –ö–∞—Ä—Ç—ã –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã: {len(wilds_data)}")

            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
            created_count = 0
            for i, card_data in enumerate(all_cards_data, 1):
                try:
                    # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã
                    effects = []
                    for effect_data in card_data["effects"]:
                        effect = CardEffect(
                            action=effect_data["action"],
                            value=effect_data["value"],
                            effect_type=effect_data["effect_type"],
                            condition_type=effect_data["condition_type"],
                            condition_value=effect_data["condition_value"],
                        )
                        effects.append(effect)

                    # –î–ª—è –∫–∞—Ä—Ç –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ start_card –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    start_card_value = card_data.get("start_card", "other")

                    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
                    card = Card(
                        name=card_data["name"],
                        crystals_cost=card_data["crystals_cost"],
                        description=card_data["description"],
                        shield=card_data["shield"],
                        champion_health=card_data["champion_health"],
                        card_type=card_data["card_type"],
                        faction=card_data["faction"],
                        icon=card_data["icon"],
                        start_card=start_card_value,
                        effects=effects,
                    )

                    session.add(card)
                    created_count += 1

                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ
                    faction = card_data["faction"]
                    card_type = card_data["card_type"]
                    print(
                        f"  [{i}/{total_cards}] –î–æ–±–∞–≤–ª–µ–Ω–∞: {card_data['name']} ({faction} - {card_type})"
                    )

                except Exception as e:
                    print(
                        f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã {card_data['name']}: {e}"
                    )
                    continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count} –∫–∞—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            print(f"   - –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã: {len([c for c in start_data])}")
            print(f"   - –ö–∞—Ä—Ç—ã –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã: {len([c for c in wilds_data])}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        await db_helper.dispose()


async def check_existing_cards():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ"""
    db_helper = DatabaseHelper(
        url=str(settings.db.url),
        echo=settings.db.echo,
        echo_pool=settings.db.echo_pool,
        pool_size=settings.db.pool_size,
        max_overflow=settings.db.max_overflow,
    )

    try:
        async with db_helper.session_context() as session:
            from sqlalchemy import select, func

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
            result = await session.execute(select(func.count(Card.id)))
            total_cards = result.scalar()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –ø–æ —Ñ—Ä–∞–∫—Ü–∏—è–º
            result = await session.execute(
                select(Card.faction, func.count(Card.id)).group_by(Card.faction)
            )
            factions_count = result.all()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –ø–æ —Ç–∏–ø–∞–º
            result = await session.execute(
                select(Card.card_type, func.count(Card.id)).group_by(
                    Card.card_type
                )
            )
            types_count = result.all()

            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   –í—Å–µ–≥–æ –∫–∞—Ä—Ç: {total_cards}")
            print(f"   –ü–æ —Ñ—Ä–∞–∫—Ü–∏—è–º:")
            for faction, count in factions_count:
                print(f"     - {faction}: {count}")
            print(f"   –ü–æ —Ç–∏–ø–∞–º:")
            for card_type, count in types_count:
                print(f"     - {card_type}: {count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await db_helper.dispose()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏...")
    asyncio.run(seed_all_cards())
    asyncio.run(check_existing_cards())
