from random import choice
from sqlalchemy import Result, delete, or_, select
from sqlalchemy.ext.asyncio import AsyncSession

from app.backend.core.models.card import Card, CardAction, EffectType
from app.backend.core.models.game import Game
from app.backend.core.models.play_card_instance import (
    CardZone,
    PlayerCardInstance,
)
from app.backend.core.models.player_state import PlayerState
from app.utils.logger import get_logger


class BuyServices:
    def __init__(
        self,
        session: AsyncSession,
    ):
        self.session = session
        self.logger = get_logger(self.__class__.__name__)

    async def buy_card_from_market(
        self,
        player_state: PlayerState,
        card: Card,
        card_instance: PlayerCardInstance,
        game: Game,
        player_id: int,
    ) -> tuple[bool, str]:
        """–ò–≥—Ä–æ–∫ –ø–æ–∫—É–ø–∞–µ—Ç –∫–∞—Ä—Ç—É —Å —Ä—ã–Ω–∫–∞"""
        self.logger.info(
            "–ò–≥—Ä–æ–∫ id - %s –ø–æ–∫—É–ø–∞–µ—Ç –∫–∞—Ä—Ç—É - %s, –≤ –∏–≥—Ä–µ id - %s, –∑–æ–Ω–µ - %s",
            player_id,
            card.name,
            game.id,
            card_instance.zone,
        )
        if player_state.crystals < card.crystals_cost:
            self.logger.warning(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–æ–≤ (%s), –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ - %s",
                player_state.crystals,
                card.crystals_cost,
            )
            return (
                False,
                (
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–æ–≤üíé –í—ã –∏–º–µ–µ—Ç–µ"
                    f" - {player_state.crystals} "
                    f"–¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç—ãüÉè {card.name} –∑–∞ "
                    f"{card.crystals_cost} –∫—Ä–∏—Å—Ç–∞–ª–æ–≤üíé"
                ),
            )

        if card_instance.zone != CardZone.MARKET:
            self.logger.warning(
                "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–æ–Ω–∞ –∫–∞—Ä—Ç—ã %s",
                card_instance.zone,
            )
            return (False, f"–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞üÉè")

        player_state.crystals -= card.crystals_cost
        self.logger.info(
            "–æ—Å—Ç–∞–≤—â–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–æ–≤ - %s",
            player_state.crystals,
        )
        card_instance.zone = CardZone.DISCARD
        card_instance.player_state_id = player_state.id
        position_on_market = card_instance.position_on_market
        card_instance.position_on_market = None
        await self.replacement_cards_from_the_market(
            game_id=game.id,
            position_on_market=position_on_market,
        )
        await self.session.commit()
        return (True, "")

    async def replacement_cards_from_the_market(
        self,
        game_id: int,
        position_on_market: int,
    ):
        "–ó–∞–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç—É –∫—É–ø–ª–µ–Ω–Ω—É—é —Å —Ä—ã–Ω–∫–∞."
        self.logger.info("–î–µ–ª–∞–µ–º –∑–∞–º–µ–Ω—É –∫–∞—Ä—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ")
        stmt = select(PlayerCardInstance).where(
            PlayerCardInstance.game_id == game_id,
            PlayerCardInstance.zone == CardZone.COMMON_DECK,
        )
        result: Result = await self.session.execute(stmt)
        available_cards_instance_id = result.scalars().all()
        self.logger.info(
            "–ü–æ–ª—É—á–∞–µ–º id —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –æ–±—â–µ–π –∫–æ–ª–æ–¥–µ- %s",
            available_cards_instance_id,
        )
        if not available_cards_instance_id:
            self.logger.error(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞—Ä—Ç –¥–ª—è —Ä—ã–Ω–∫–∞ –≤ –∏–≥—Ä–µ %s",
                game_id,
            )
            return []

        replacement_card_instance: PlayerCardInstance = choice(
            available_cards_instance_id
        )
        self.logger.info(
            "–ü–æ–ª—É—á–∞–µ–º id —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –∑–∞–º–µ–Ω—É - %s",
            replacement_card_instance.id,
        )

        replacement_card_instance.zone = CardZone.MARKET
        replacement_card_instance.position_on_market = position_on_market
