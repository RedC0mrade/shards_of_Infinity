"""Create tables

Revision ID: 10811e364ac4
Revises:
Create Date: 2025-08-26 15:58:09.570763

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "10811e364ac4"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cards",
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("crystals_cost", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=False),
        sa.Column("shield", sa.Integer(), nullable=False),
        sa.Column("champion_health", sa.Integer(), nullable=False),
        sa.Column(
            "faction",
            sa.Enum(
                "WILDS",
                "ORDER",
                "HOMODEUS",
                "DEMIREALM",
                "NEUTRAL",
                name="cardfaction",
            ),
            nullable=False,
        ),
        sa.Column(
            "card_type",
            sa.Enum("ALLY", "CHAMPION", "MERCENARY", "RELIC", name="cardtype"),
            nullable=False,
        ),
        sa.Column("icon", sa.String(length=100), nullable=False),
        sa.Column("start_card", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "champion_health >= 0",
            name=op.f("ck_cards_champion_health_non_negative"),
        ),
        sa.CheckConstraint(
            "crystals_cost >= 0", name=op.f("ck_cards_cost_non_negative")
        ),
        sa.CheckConstraint(
            "shield >= 0", name=op.f("ck_cards_shield_non_negative")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_cards")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("chat_id", sa.BigInteger(), nullable=False),
        sa.Column("username", sa.String(length=20), nullable=True),
        sa.Column("first_name", sa.String(length=20), nullable=True),
        sa.Column("last_name", sa.String(length=20), nullable=True),
        sa.Column("victories", sa.Integer(), nullable=False),
        sa.Column("defeats", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("chat_id", name=op.f("uq_users_chat_id")),
    )
    op.create_table(
        "card_effects",
        sa.Column("card_id", sa.Integer(), nullable=False),
        sa.Column(
            "action",
            sa.Enum(
                "CARD",
                "CARD_DESTROY",
                "ATTACK",
                "HEALING",
                "CRYSTAL",
                "MIGHT",
                "SPECIAL",
                "TAKE_MERCENARY",
                "IMMUNITY",
                "COPY_EFFECT",
                "DOUBLE_CHOICE",
                "NONE",
                name="cardaction",
            ),
            nullable=False,
        ),
        sa.Column("value", sa.Integer(), nullable=True),
        sa.Column(
            "effect_type",
            sa.Enum("BASE", "CONDITIONAL", name="effecttype"),
            nullable=False,
        ),
        sa.Column(
            "condition_type",
            sa.Enum(
                "MASTERY",
                "PLAYER_HEALTH",
                "ENEMY_HAS_CHAMPION",
                "YOU_HAVE_CARD_IN_RESET",
                "CARD_ON_TABLE",
                "NONE",
                name="conditiontype",
            ),
            nullable=True,
        ),
        sa.Column("condition_value", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["card_id"],
            ["cards.id"],
            name=op.f("fk_card_effects_card_id_cards"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_card_effects")),
    )
    op.create_table(
        "games",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("WAITING", "IN_PROGRESS", "FINISHED", name="gamestatus"),
            nullable=False,
        ),
        sa.Column("player1_id", sa.BigInteger(), nullable=False),
        sa.Column("player2_id", sa.BigInteger(), nullable=True),
        sa.Column("active_player_id", sa.BigInteger(), nullable=True),
        sa.Column("non_active_player_id", sa.BigInteger(), nullable=True),
        sa.Column("invite_token", sa.String(length=32), nullable=True),
        sa.Column(
            "market_cards",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'[]'::jsonb"),
            nullable=False,
        ),
        sa.Column("winner_id", sa.BigInteger(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["active_player_id"],
            ["users.id"],
            name=op.f("fk_games_active_player_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["non_active_player_id"],
            ["users.id"],
            name=op.f("fk_games_non_active_player_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["player1_id"],
            ["users.id"],
            name=op.f("fk_games_player1_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["player2_id"],
            ["users.id"],
            name=op.f("fk_games_player2_id_users"),
        ),
        sa.ForeignKeyConstraint(
            ["winner_id"], ["users.id"], name=op.f("fk_games_winner_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_games")),
        sa.UniqueConstraint(
            "invite_token", name=op.f("uq_games_invite_token")
        ),
    )
    op.create_table(
        "player_states",
        sa.Column("game_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.BigInteger(), nullable=False),
        sa.Column("health", sa.Integer(), nullable=False),
        sa.Column("mastery", sa.Integer(), nullable=False),
        sa.Column("crystals", sa.Integer(), nullable=False),
        sa.Column("power", sa.Integer(), nullable=False),
        sa.Column("deck_count", sa.Integer(), nullable=False),
        sa.Column("discard_count", sa.Integer(), nullable=False),
        sa.Column("hand_count", sa.Integer(), nullable=False),
        sa.Column("is_defeated", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["game_id"],
            ["games.id"],
            name=op.f("fk_player_states_game_id_games"),
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["users.id"],
            name=op.f("fk_player_states_player_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_player_states")),
    )
    op.create_table(
        "player_card_instances",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("player_state_id", sa.Integer(), nullable=False),
        sa.Column("card_id", sa.Integer(), nullable=False),
        sa.Column(
            "zone",
            sa.Enum(
                "DECK",
                "HAND",
                "DISCARD",
                "IN_PLAY",
                "EXILED",
                "MARKET",
                "CHAMPION",
                "OTHER",
                name="cardzone",
            ),
            nullable=False,
        ),
        sa.Column("order_in_zone", sa.Integer(), nullable=False),
        sa.Column("is_exhausted", sa.Boolean(), nullable=False),
        sa.Column("was_played_this_turn", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["card_id"],
            ["cards.id"],
            name=op.f("fk_player_card_instances_card_id_cards"),
        ),
        sa.ForeignKeyConstraint(
            ["player_state_id"],
            ["player_states.id"],
            name=op.f(
                "fk_player_card_instances_player_state_id_player_states"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_player_card_instances")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("player_card_instances")
    op.drop_table("player_states")
    op.drop_table("games")
    op.drop_table("card_effects")
    op.drop_table("users")
    op.drop_table("cards")
    # ### end Alembic commands ###
